package com.th.jbp.backend.service;

import java.util.List;

import javax.persistence.EntityManager;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.th.jbp.backend.entity.ObjectResult;
import com.th.jbp.jpa.entity.InventoryItemM;
import com.th.jbp.jpa.entity.InventoryItemOrdersM;
import com.th.jbp.jpa.repositories.InventoryItemOrdersRepository;

@Service("inventoryItemOrdersService")
@Scope(value = "singleton", proxyMode = ScopedProxyMode.TARGET_CLASS)
@Transactional
public class InventoryItemOrdersService implements IInventoryItemOrdersService{
	private static final Logger LOGGER = Logger.getLogger(InventoryItemOrdersService.class);

	@Autowired
	InventoryItemOrdersRepository inventoryItemOrdersRepository;
	
	@Autowired
	EntityManager em;
	
	@Override
	@Transactional(readOnly = true)
	public ObjectResult<InventoryItemOrdersM> getByKey(InventoryItemOrdersM entity) {
		ObjectResult<InventoryItemOrdersM> result = new ObjectResult<>();
		InventoryItemOrdersM inventoryOrdersM = inventoryItemOrdersRepository.findOne(entity.getInventoryItemOrdersId());
		if (inventoryOrdersM == null || entity == null) {
			result = new ObjectResult<>(ObjectResult.DATA_NOT_FOUND);
		} else {
			result = new ObjectResult<>(ObjectResult.SUCCESS, inventoryOrdersM);
		}
		return result;
	}

	@Override
	public ObjectResult<List<InventoryItemOrdersM>> lists() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ObjectResult<InventoryItemOrdersM> save(InventoryItemOrdersM entity) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ObjectResult<InventoryItemOrdersM> update(InventoryItemOrdersM entity) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ObjectResult<InventoryItemOrdersM> delete(InventoryItemOrdersM entity) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	@Transactional(readOnly = true)
	public Page<InventoryItemOrdersM> lists(String lotNumber, String itemName, String itemType,
			PageRequest pageRequest) {
		LOGGER.debug("itemNo = "+itemNo+" , itemName = "+itemName+" , itemType = "+itemType+" , pageRequest = "+pageRequest);
		Page<InventoryItemM> results = null;
		if(StringUtils.isNotEmpty(itemNo) && StringUtils.isNotEmpty(itemName) && StringUtils.isNotEmpty(itemType)){
			results = inventoryItemRepository.findByItemNoAndItemNameAndItemType("%"+itemNo+"%", "%"+itemName+"%", itemType, pageRequest);
		}else if(StringUtils.isNotEmpty(itemNo) && StringUtils.isNotEmpty(itemName)){
			results = inventoryItemRepository.findByItemNoAndItemName("%"+itemNo+"%", "%"+itemName+"%", pageRequest);
		}else if(StringUtils.isNotEmpty(itemNo) && StringUtils.isNotEmpty(itemType)){
			results = inventoryItemRepository.findByItemNoAndItemType("%"+itemNo+"%", itemType, pageRequest);
		}else if(StringUtils.isNotEmpty(itemName) && StringUtils.isNotEmpty(itemType)){
			results = inventoryItemRepository.findByItemNameAndItemType("%"+itemName+"%", itemType, pageRequest);
		}else if(StringUtils.isNotEmpty(itemNo)){
			results = inventoryItemRepository.findByItemNo("%"+itemNo+"%", pageRequest);
		}else if(StringUtils.isNotEmpty(itemName)){
			results = inventoryItemRepository.findByItemName("%"+itemName+"%", pageRequest);
		}else if(StringUtils.isNotEmpty(itemType)){
			results = inventoryItemRepository.findByItemType(itemType, pageRequest);
		}else{
			results = inventoryItemRepository.findAll(pageRequest);
		}
		
		return results;
	}

}
